<app>

<div id="container">
  <nav class="navbar navbar-expand-lg navbar-light bg-light">
  <a class="navbar-brand" href="#">{props.titleBar}</a>
  <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
    <span class="navbar-toggler-icon"></span>
  </button>

  <div class="collapse navbar-collapse" id="navbarSupportedContent">
    <form class="form-inline my-2 my-lg-0">
      <input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search">
      <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
    </form>
  </div>
</nav>
</div>
<div class="container">
  <div class="row">
    <div class="col-md-12">
      <client-display />
    </div>
  </div>
</div>
<modal-edit></modal-edit>
<modal-delete></modal-delete>

  <script>
    import {register, mount} from 'riot'

    import ClientDisplay from './ClientDisplay.riot'
    import modalEdit from './modalEdit.riot'
    import modalDelete from './modalDelete.riot'

    const axios = require('axios');

    register('client-display', ClientDisplay)
    register('modal-edit', modalEdit)
    register('modal-delete', modalDelete)
    mount('modal-edit')
    mount('modal-delete')
    // find all the DOM nodes called `<ClientDisplay>` and
    // mount them with the component previously registered
    axios.get('http://localhost:3333/api/clients')
            .then(function (response) {
                // handle success
            console.log(response);
            if(response.status==200){
              mount('client-display',{'data':response.data})
            }
            
              //console.log(response.data)
            })
            .catch(function (error) {
                // handle error
                console.log(error);
            })
            .finally(function () {
                // always executed
            });
    export default {
      onBeforeMount(props, state) {
        
      }
    }
  </script>
</app>
